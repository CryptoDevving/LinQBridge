// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nftlp

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PolyNFTLockProxyABI is the input ABI used to generate the binding from.
const PolyNFTLockProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"targetProxyHash\",\"type\":\"bytes\"}],\"name\":\"BindAssetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"targetProxyHash\",\"type\":\"bytes\"}],\"name\":\"BindProxyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toAssetHash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"SetManagerProxyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAssetHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UnlockEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"assetHashMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAssetHash\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"toAssetHash\",\"type\":\"bytes\"}],\"name\":\"bindAssetHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"targetProxyHash\",\"type\":\"bytes\"}],\"name\":\"bindProxyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerProxyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"proxyHashMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethCCMProxyAddr\",\"type\":\"address\"}],\"name\":\"setManagerProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"argsBs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"fromContractAddr\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"fromChainId\",\"type\":\"uint64\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PolyNFTLockProxyBin is the compiled bytecode used for deploying new contracts.
var PolyNFTLockProxyBin = "0x608060405260006100146100b760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100bf565b600033905090565b613b6980620000cf6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146106575780638f32d59b146106a15780639e5767aa146106c3578063af9980f014610774578063d798f881146107b8578063f2fde38b14610802576100b4565b806306af4b9f146100b9578063150b7a02146102375780633348f63b1461038e578063379b98f6146104955780634f7d98081461057c578063715018a61461064d575b600080fd5b61021d600480360360608110156100cf57600080fd5b81019080803590602001906401000000008111156100ec57600080fd5b8201836020820111156100fe57600080fd5b8035906020019184600183028401116401000000008311171561012057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803567ffffffffffffffff169060200190929190505050610846565b604051808215151515815260200191505060405180910390f35b61033a6004803603608081101561024d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156102b457600080fd5b8201836020820111156102c657600080fd5b803590602001918460018302840111640100000000831117156102e857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506112da565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61047b600480360360608110156103a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190803590602001906401000000008111156103f557600080fd5b82018360208201111561040757600080fd5b8035906020019184600183028401116401000000008311171561042957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611db5565b604051808215151515815260200191505060405180910390f35b610562600480360360408110156104ab57600080fd5b81019080803567ffffffffffffffff169060200190929190803590602001906401000000008111156104dc57600080fd5b8201836020820111156104ee57600080fd5b8035906020019184600183028401116401000000008311171561051057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611fa1565b604051808215151515815260200191505060405180910390f35b6105d26004803603604081101561059257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803567ffffffffffffffff16906020019092919050505061211b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106125780820151818401526020810190506105f7565b50505050905090810190601f16801561063f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106556121d8565b005b61065f612311565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106a961233a565b604051808215151515815260200191505060405180910390f35b6106f9600480360360208110156106d957600080fd5b81019080803567ffffffffffffffff169060200190929190505050612398565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561073957808201518184015260208101905061071e565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107b66004803603602081101561078a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612448565b005b6107c061258b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108446004803603602081101561081857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125b1565b005b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166387939a7f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d60208110156108de57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1661090d612637565b73ffffffffffffffffffffffffffffffffffffffff1614610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001806139b6602d913960400191505060405180910390fd5b61098161386b565b61098a8661263f565b90506000855114156109e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806139e3602b913960400191505060405180910390fd5b60008160000151511415610a63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f746f4173736574486173682063616e6e6f7420626520656d707479000000000081525060200191505060405180910390fd5b6000610a7282600001516126c0565b905060008260200151511415610af0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f416464726573732063616e6e6f7420626520656d7074790000000000000081525060200191505060405180910390fd5b6000610aff83602001516126c0565b905060006060600060608660400151604051602401808281526020019150506040516020818303038152906040527f6352211e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff16816040518082805190602001908083835b60208310610be85780518252602082019150602081019050602083039250610bc5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c4a576040519150601f19603f3d011682016040523d82523d6000602084013e610c4f565b606091505b5080945081955050508315610f9e57828060200190516020811015610c7357600080fd5b810190808051906020019092919050505091503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480610cec5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613b0d6027913960400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f9d5730858860400151604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040527f42842e0e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff16816040518082805190602001908083835b60208310610ebc5780518252602082019150602081019050602083039250610e99565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610f1e576040519150601f19603f3d011682016040523d82523d6000602084013e610f23565b606091505b50508094505083610f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6661696c656420746f2063616c6c20736166655472616e7366657246726f6d0081525060200191505060405180910390fd5b5b5b831580610fd75750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611224578487604001518860600151604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611062578082015181840152602081019050611047565b50505050905090810190601f16801561108f5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f4a99950b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff16816040518082805190602001908083835b60208310611160578051825260208201915060208101905060208303925061113d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146111c2576040519150601f19603f3d011682016040523d82523d6000602084013e6111c7565b606091505b50508094505083611223576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806139826034913960400191505060405180910390fd5b5b7fd90288730b87c2b8e0c45bd82260fd22478aba30ae1c4d578b8daba9261604df86868960400151604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001985050505050505050509392505050565b6000806112e5612637565b90506000835111611341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613a606023913960400191505060405180910390fd5b6113608173ffffffffffffffffffffffffffffffffffffffff16612728565b6113d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f63616c6c6572206d757374206265206120636f6e74726163742e20000000000081525060200191505060405180910390fd5b6060600060606113e18661273b565b8093508194505050600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114e15780601f106114b6576101008083540402835291602001916114e1565b820191906000526020600020905b8154815290600101906020018083116114c457829003601f168201915b50505050509050600081511415611560576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f656d70747920696c6c6567616c20746f4173736574486173680000000000000081525060200191505060405180910390fd5b60008490503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e8a6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156115cd57600080fd5b505afa1580156115e1573d6000803e3d6000fd5b505050506040513d60208110156115f757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f77726f6e67206f776e657220666f72207468697320746f6b656e20494400000081525060200191505060405180910390fd5b60608173ffffffffffffffffffffffffffffffffffffffff1663c87b56dd8a6040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156116e457600080fd5b505afa1580156116f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561172257600080fd5b810190808051604051939291908464010000000082111561174257600080fd5b8382019150602082018581111561175857600080fd5b825186600182028301116401000000008211171561177557600080fd5b8083526020830192505050908051906020019080838360005b838110156117a957808201518184015260208101905061178e565b50505050905090810190601f1680156117d65780820380516001836020036101000a031916815260200191505b5060405250505090506117e761386b565b60405180608001604052808581526020018781526020018b815260200183815250905060606118158261277a565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387939a7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d60208110156118ab57600080fd5b810190808051906020019092919050505090506060600260008967ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561197b5780601f106119505761010080835404028352916020019161197b565b820191906000526020600020905b81548152906001019060200180831161195e57829003601f168201915b505050505090506000815114156119fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f656d70747920696c6c6567616c20746f50726f7879486173680000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663bd5cf6258983866040518463ffffffff1660e01b8152600401808467ffffffffffffffff1667ffffffffffffffff168152602001806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611a8a578082015181840152602081019050611a6f565b50505050905090810190601f168015611ab75780820380516001836020036101000a031916815260200191505b50848103835260068152602001807f756e6c6f636b0000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b83811015611b24578082015181840152602081019050611b09565b50505050905090810190601f168015611b515780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015611b7457600080fd5b505af1158015611b88573d6000803e3d6000fd5b505050506040513d6020811015611b9e57600080fd5b8101908080519060200190929190505050611c04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613a0e602f913960400191505060405180910390fd5b5050505050507f98081b3037dc78e7a7ffa56932222cfc7ea9325ad6a3e7b0b3b4e3e678d7fd1384898386868c604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018567ffffffffffffffff1667ffffffffffffffff168152602001848152602001838103835287818151815260200191508051906020019080838360005b83811015611cf9578082015181840152602081019050611cde565b50505050905090810190601f168015611d265780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b83811015611d5f578082015181840152602081019050611d44565b50505050905090810190601f168015611d8c5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a163150b7a0260e01b945050505050949350505050565b6000611dbf61233a565b611e31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000209080519060200190611ea9929190613893565b507f661ffcb37a4682f1f64221cc81f683e2317505737d6425dd6799fcd39bc3753f848484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611f5a578082015181840152602081019050611f3f565b50505050905090810190601f168015611f875780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600190509392505050565b6000611fab61233a565b61201d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b81600260008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000209080519060200190612058929190613893565b507fdacd7d303272a3b58aec6620d6d1fb588f4996a5b46858ed437f1c34348f2d0f8383604051808367ffffffffffffffff1667ffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120d65780820151818401526020810190506120bb565b50505050905090810190601f1680156121035780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16001905092915050565b6003602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121d05780601f106121a5576101008083540402835291602001916121d0565b820191906000526020600020905b8154815290600101906020018083116121b357829003601f168201915b505050505081565b6121e061233a565b612252576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661237c612637565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60026020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124405780601f1061241557610100808354040283529160200191612440565b820191906000526020600020905b81548152906001019060200180831161242357829003601f168201915b505050505081565b61245061233a565b6124c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f43b1a8ec337adb61e8311ed025d99c80db65c02fe5c5027c1b6a93b40970cec4600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6125b961233a565b61262b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6126348161291c565b50565b600033905090565b61264761386b565b61264f61386b565b600080905061265e8482612a60565b8191508360000181935082905250506126778482612a60565b8191508360200181935082905250506126908482612b60565b836040018193508281525050506126a78482612a60565b8191508360600181935082905250508192505050919050565b6000601482511461271c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806139396023913960400191505060405180910390fd5b60148201519050919050565b600080823b905060008111915050919050565b606060006060600080600090506127528682612a60565b80925081945050506127648682612cb9565b8092508193505050828294509450505050915091565b60608061278a8360000151612d81565b6127978460200151612d81565b6127a48560400151612e57565b6127b18660600151612d81565b6040516020018085805190602001908083835b602083106127e757805182526020820191506020810190506020830392506127c4565b6001836020036101000a03801982511681845116808217855250505050505090500184805190602001908083835b602083106128385780518252602082019150602081019050602083039250612815565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083106128895780518252602082019150602081019050602083039250612866565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106128da57805182526020820191506020810190506020830392506128b7565b6001836020036101000a038019825116818451168082178552505050505050905001945050505050604051602081830303815290604052905080915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061395c6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600080612a6f8585612f36565b8095508192505050845181850111158015612a8b575080840184105b612ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613ae96024913960400191505060405180910390fd5b6060811560008114612afd57604051915060208201604052612b4e565b6040519150601f8316801560200281840101848101888315602002848c0101015b81831015612b3b5780518352602083019250602081019050612b1e565b50858552601f19601f8301166040525050505b50808286019350935050509250929050565b60008083516020840111158015612b7957506020830183105b612bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613a3d6023913960400191505060405180910390fd5b600060405160206000600182038760208a0101515b83831015612c035780821a83860153600183019250600182039150612be3565b5050508082016040528151925050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115612ca8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f56616c75652065786365656473207468652072616e676500000000000000000081525060200191505060405180910390fd5b806020850192509250509250929050565b60008083516008840111158015612cd257506008830183105b612d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613aa56022913960400191505060405180910390fd5b600060405160086000600182038760208a0101515b83831015612d5c5780821a83860153600183019250600182039150612d3c565b5050508082016040528060200382035192505050806008850192509250509250929050565b6060600082519050612d9281613267565b836040516020018083805190602001908083835b60208310612dc95780518252602082019150602081019050602083039250612da6565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310612e1a5780518252602082019150602081019050602083039250612df7565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612eef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f56616c756520657863656564732075696e743235362072616e6765000000000081525060200191505060405180910390fd5b6060604051905060208082526000601f5b82821015612f235785811a82602086010153600182019150600181039050612f00565b5050604082016040525080915050919050565b6000806000612f458585613540565b8095508192505050600060fd60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561302857612f8786866135e7565b8161ffff169150809650819250505060fd8110158015612fa9575061ffff8111155b61301b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4e65787455696e7431362c2076616c7565206f7574736964652072616e67650081525060200191505060405180910390fd5b8085935093505050613260565b60fe60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415613105576130608686613691565b8163ffffffff169150809650819250505061ffff81118015613086575063ffffffff8111155b6130f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e65787456617255696e742c2076616c7565206f7574736964652072616e676581525060200191505060405180910390fd5b8085935093505050613260565b60ff60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156131d85761313d8686612cb9565b8167ffffffffffffffff169150809650819250505063ffffffff81116131cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e65787456617255696e742c2076616c7565206f7574736964652072616e676581525060200191505060405180910390fd5b8085935093505050613260565b8160f81c60ff16905060fd8110613257576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e65787456617255696e742c2076616c7565206f7574736964652072616e676581525060200191505060405180910390fd5b80859350935050505b9250929050565b606060fd8267ffffffffffffffff16101561328c5761328582613759565b905061353b565b61ffff8267ffffffffffffffff1611613378576132ac60fd60f81b61377e565b6132b583613793565b6040516020018083805190602001908083835b602083106132eb57805182526020820191506020810190506020830392506132c8565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061333c5780518252602082019150602081019050602083039250613319565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905061353b565b63ffffffff8267ffffffffffffffff16116134665761339a60fe60f81b61377e565b6133a3836137db565b6040516020018083805190602001908083835b602083106133d957805182526020820191506020810190506020830392506133b6565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061342a5780518252602082019150602081019050602083039250613407565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905061353b565b61347360ff60f81b61377e565b61347c83613823565b6040516020018083805190602001908083835b602083106134b2578051825260208201915060208101905060208303925061348f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061350357805182526020820191506020810190506020830392506134e0565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290505b919050565b6000808351600184011115801561355957506001830183105b6135cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e657874427974652c204f66667365742065786365656473206d6178696d756d81525060200191505060405180910390fd5b6000836020860101519050806001850192509250509250929050565b6000808351600284011115801561360057506002830183105b613655576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a836022913960400191505060405180910390fd5b6000604051846020870101518060011a82538060001a600183015360028201604052601e82035192505050806002850192509250509250929050565b600080835160048401111580156136aa57506004830183105b6136ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613ac76022913960400191505060405180910390fd5b600060405160046000600182038760208a0101515b838310156137345780821a83860153600183019250600182039150613714565b5050508082016040528060200382035192505050806004850192509250509250929050565b6060806040519050600181528260f81b60208201526021810160405280915050919050565b606061378c8260f81c613759565b9050919050565b606080604051905060028082526000601f5b828210156137c85785811a826020860101536001820191506001810390506137a5565b5050602282016040525080915050919050565b606080604051905060048082526000601f5b828210156138105785811a826020860101536001820191506001810390506137ed565b5050602482016040525080915050919050565b606080604051905060088082526000601f5b828210156138585785811a82602086010153600182019150600181039050613835565b5050602882016040525080915050919050565b6040518060800160405280606081526020016060815260200160008152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106138d457805160ff1916838001178555613902565b82800160010185558215613902579182015b828111156139015782518255916020019190600101906138e6565b5b50905061390f9190613913565b5090565b61393591905b80821115613931576000816000905550600101613919565b5090565b9056fe6279746573206c656e67746820646f6573206e6f74206d6174636820616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736661696c656420746f2063616c6c206d696e745769746855524920746f206d696e742061206e6577206d617070696e67204e46546d736753656e646572206973206e6f742045746843726f7373436861696e4d616e61676572436f6e747261637466726f6d2070726f787920636f6e747261637420616464726573732063616e6e6f7420626520656d70747945746843726f7373436861696e4d616e616765722063726f7373436861696e206578656375746564206572726f72214e65787455696e743235362c206f66667365742065786365656473206d6178696d756d6c656e677468206f6620746f416464726573732063616e2774206265207a65726f2e204e65787455696e7431362c206f66667365742065786365656473206d6178696d756d4e65787455696e7436342c206f66667365742065786365656473206d6178696d756d4e65787455696e7433322c206f66667365742065786365656473206d6178696d756d4e65787456617242797465732c206f66667365742065786365656473206d6178696d756d796f757220746f6b656e204944206973206e6f7420686f6c64206279206c6f636b70726f78792ea26469706673582212209074d4e2d1f0386477868a7a412fb2f27827dafdcd4c995f6ffbd8ea741b7f5e64736f6c63430006020033"

// DeployPolyNFTLockProxy deploys a new Ethereum contract, binding an instance of PolyNFTLockProxy to it.
func DeployPolyNFTLockProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PolyNFTLockProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(PolyNFTLockProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PolyNFTLockProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PolyNFTLockProxy{PolyNFTLockProxyCaller: PolyNFTLockProxyCaller{contract: contract}, PolyNFTLockProxyTransactor: PolyNFTLockProxyTransactor{contract: contract}, PolyNFTLockProxyFilterer: PolyNFTLockProxyFilterer{contract: contract}}, nil
}

// PolyNFTLockProxy is an auto generated Go binding around an Ethereum contract.
type PolyNFTLockProxy struct {
	PolyNFTLockProxyCaller     // Read-only binding to the contract
	PolyNFTLockProxyTransactor // Write-only binding to the contract
	PolyNFTLockProxyFilterer   // Log filterer for contract events
}

// PolyNFTLockProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type PolyNFTLockProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolyNFTLockProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PolyNFTLockProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolyNFTLockProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PolyNFTLockProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolyNFTLockProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PolyNFTLockProxySession struct {
	Contract     *PolyNFTLockProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PolyNFTLockProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PolyNFTLockProxyCallerSession struct {
	Contract *PolyNFTLockProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// PolyNFTLockProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PolyNFTLockProxyTransactorSession struct {
	Contract     *PolyNFTLockProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// PolyNFTLockProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type PolyNFTLockProxyRaw struct {
	Contract *PolyNFTLockProxy // Generic contract binding to access the raw methods on
}

// PolyNFTLockProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PolyNFTLockProxyCallerRaw struct {
	Contract *PolyNFTLockProxyCaller // Generic read-only contract binding to access the raw methods on
}

// PolyNFTLockProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PolyNFTLockProxyTransactorRaw struct {
	Contract *PolyNFTLockProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPolyNFTLockProxy creates a new instance of PolyNFTLockProxy, bound to a specific deployed contract.
func NewPolyNFTLockProxy(address common.Address, backend bind.ContractBackend) (*PolyNFTLockProxy, error) {
	contract, err := bindPolyNFTLockProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxy{PolyNFTLockProxyCaller: PolyNFTLockProxyCaller{contract: contract}, PolyNFTLockProxyTransactor: PolyNFTLockProxyTransactor{contract: contract}, PolyNFTLockProxyFilterer: PolyNFTLockProxyFilterer{contract: contract}}, nil
}

// NewPolyNFTLockProxyCaller creates a new read-only instance of PolyNFTLockProxy, bound to a specific deployed contract.
func NewPolyNFTLockProxyCaller(address common.Address, caller bind.ContractCaller) (*PolyNFTLockProxyCaller, error) {
	contract, err := bindPolyNFTLockProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyCaller{contract: contract}, nil
}

// NewPolyNFTLockProxyTransactor creates a new write-only instance of PolyNFTLockProxy, bound to a specific deployed contract.
func NewPolyNFTLockProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*PolyNFTLockProxyTransactor, error) {
	contract, err := bindPolyNFTLockProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyTransactor{contract: contract}, nil
}

// NewPolyNFTLockProxyFilterer creates a new log filterer instance of PolyNFTLockProxy, bound to a specific deployed contract.
func NewPolyNFTLockProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*PolyNFTLockProxyFilterer, error) {
	contract, err := bindPolyNFTLockProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyFilterer{contract: contract}, nil
}

// bindPolyNFTLockProxy binds a generic wrapper to an already deployed contract.
func bindPolyNFTLockProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PolyNFTLockProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PolyNFTLockProxy *PolyNFTLockProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PolyNFTLockProxy.Contract.PolyNFTLockProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PolyNFTLockProxy *PolyNFTLockProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.PolyNFTLockProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PolyNFTLockProxy *PolyNFTLockProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.PolyNFTLockProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PolyNFTLockProxy *PolyNFTLockProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PolyNFTLockProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.contract.Transact(opts, method, params...)
}

// AssetHashMap is a free data retrieval call binding the contract method 0x4f7d9808.
//
// Solidity: function assetHashMap(address , uint64 ) view returns(bytes)
func (_PolyNFTLockProxy *PolyNFTLockProxyCaller) AssetHashMap(opts *bind.CallOpts, arg0 common.Address, arg1 uint64) ([]byte, error) {
	var out []interface{}
	err := _PolyNFTLockProxy.contract.Call(opts, &out, "assetHashMap", arg0, arg1)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AssetHashMap is a free data retrieval call binding the contract method 0x4f7d9808.
//
// Solidity: function assetHashMap(address , uint64 ) view returns(bytes)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) AssetHashMap(arg0 common.Address, arg1 uint64) ([]byte, error) {
	return _PolyNFTLockProxy.Contract.AssetHashMap(&_PolyNFTLockProxy.CallOpts, arg0, arg1)
}

// AssetHashMap is a free data retrieval call binding the contract method 0x4f7d9808.
//
// Solidity: function assetHashMap(address , uint64 ) view returns(bytes)
func (_PolyNFTLockProxy *PolyNFTLockProxyCallerSession) AssetHashMap(arg0 common.Address, arg1 uint64) ([]byte, error) {
	return _PolyNFTLockProxy.Contract.AssetHashMap(&_PolyNFTLockProxy.CallOpts, arg0, arg1)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PolyNFTLockProxy.contract.Call(opts, &out, "isOwner")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) IsOwner() (bool, error) {
	return _PolyNFTLockProxy.Contract.IsOwner(&_PolyNFTLockProxy.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyCallerSession) IsOwner() (bool, error) {
	return _PolyNFTLockProxy.Contract.IsOwner(&_PolyNFTLockProxy.CallOpts)
}

// ManagerProxyContract is a free data retrieval call binding the contract method 0xd798f881.
//
// Solidity: function managerProxyContract() view returns(address)
func (_PolyNFTLockProxy *PolyNFTLockProxyCaller) ManagerProxyContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PolyNFTLockProxy.contract.Call(opts, &out, "managerProxyContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ManagerProxyContract is a free data retrieval call binding the contract method 0xd798f881.
//
// Solidity: function managerProxyContract() view returns(address)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) ManagerProxyContract() (common.Address, error) {
	return _PolyNFTLockProxy.Contract.ManagerProxyContract(&_PolyNFTLockProxy.CallOpts)
}

// ManagerProxyContract is a free data retrieval call binding the contract method 0xd798f881.
//
// Solidity: function managerProxyContract() view returns(address)
func (_PolyNFTLockProxy *PolyNFTLockProxyCallerSession) ManagerProxyContract() (common.Address, error) {
	return _PolyNFTLockProxy.Contract.ManagerProxyContract(&_PolyNFTLockProxy.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PolyNFTLockProxy *PolyNFTLockProxyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PolyNFTLockProxy.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) Owner() (common.Address, error) {
	return _PolyNFTLockProxy.Contract.Owner(&_PolyNFTLockProxy.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PolyNFTLockProxy *PolyNFTLockProxyCallerSession) Owner() (common.Address, error) {
	return _PolyNFTLockProxy.Contract.Owner(&_PolyNFTLockProxy.CallOpts)
}

// ProxyHashMap is a free data retrieval call binding the contract method 0x9e5767aa.
//
// Solidity: function proxyHashMap(uint64 ) view returns(bytes)
func (_PolyNFTLockProxy *PolyNFTLockProxyCaller) ProxyHashMap(opts *bind.CallOpts, arg0 uint64) ([]byte, error) {
	var out []interface{}
	err := _PolyNFTLockProxy.contract.Call(opts, &out, "proxyHashMap", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ProxyHashMap is a free data retrieval call binding the contract method 0x9e5767aa.
//
// Solidity: function proxyHashMap(uint64 ) view returns(bytes)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) ProxyHashMap(arg0 uint64) ([]byte, error) {
	return _PolyNFTLockProxy.Contract.ProxyHashMap(&_PolyNFTLockProxy.CallOpts, arg0)
}

// ProxyHashMap is a free data retrieval call binding the contract method 0x9e5767aa.
//
// Solidity: function proxyHashMap(uint64 ) view returns(bytes)
func (_PolyNFTLockProxy *PolyNFTLockProxyCallerSession) ProxyHashMap(arg0 uint64) ([]byte, error) {
	return _PolyNFTLockProxy.Contract.ProxyHashMap(&_PolyNFTLockProxy.CallOpts, arg0)
}

// BindAssetHash is a paid mutator transaction binding the contract method 0x3348f63b.
//
// Solidity: function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes toAssetHash) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) BindAssetHash(opts *bind.TransactOpts, fromAssetHash common.Address, toChainId uint64, toAssetHash []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "bindAssetHash", fromAssetHash, toChainId, toAssetHash)
}

// BindAssetHash is a paid mutator transaction binding the contract method 0x3348f63b.
//
// Solidity: function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes toAssetHash) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) BindAssetHash(fromAssetHash common.Address, toChainId uint64, toAssetHash []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.BindAssetHash(&_PolyNFTLockProxy.TransactOpts, fromAssetHash, toChainId, toAssetHash)
}

// BindAssetHash is a paid mutator transaction binding the contract method 0x3348f63b.
//
// Solidity: function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes toAssetHash) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) BindAssetHash(fromAssetHash common.Address, toChainId uint64, toAssetHash []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.BindAssetHash(&_PolyNFTLockProxy.TransactOpts, fromAssetHash, toChainId, toAssetHash)
}

// BindProxyHash is a paid mutator transaction binding the contract method 0x379b98f6.
//
// Solidity: function bindProxyHash(uint64 toChainId, bytes targetProxyHash) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) BindProxyHash(opts *bind.TransactOpts, toChainId uint64, targetProxyHash []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "bindProxyHash", toChainId, targetProxyHash)
}

// BindProxyHash is a paid mutator transaction binding the contract method 0x379b98f6.
//
// Solidity: function bindProxyHash(uint64 toChainId, bytes targetProxyHash) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) BindProxyHash(toChainId uint64, targetProxyHash []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.BindProxyHash(&_PolyNFTLockProxy.TransactOpts, toChainId, targetProxyHash)
}

// BindProxyHash is a paid mutator transaction binding the contract method 0x379b98f6.
//
// Solidity: function bindProxyHash(uint64 toChainId, bytes targetProxyHash) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) BindProxyHash(toChainId uint64, targetProxyHash []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.BindProxyHash(&_PolyNFTLockProxy.TransactOpts, toChainId, targetProxyHash)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.OnERC721Received(&_PolyNFTLockProxy.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.OnERC721Received(&_PolyNFTLockProxy.TransactOpts, operator, from, tokenId, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PolyNFTLockProxy *PolyNFTLockProxySession) RenounceOwnership() (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.RenounceOwnership(&_PolyNFTLockProxy.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.RenounceOwnership(&_PolyNFTLockProxy.TransactOpts)
}

// SetManagerProxy is a paid mutator transaction binding the contract method 0xaf9980f0.
//
// Solidity: function setManagerProxy(address ethCCMProxyAddr) returns()
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) SetManagerProxy(opts *bind.TransactOpts, ethCCMProxyAddr common.Address) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "setManagerProxy", ethCCMProxyAddr)
}

// SetManagerProxy is a paid mutator transaction binding the contract method 0xaf9980f0.
//
// Solidity: function setManagerProxy(address ethCCMProxyAddr) returns()
func (_PolyNFTLockProxy *PolyNFTLockProxySession) SetManagerProxy(ethCCMProxyAddr common.Address) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.SetManagerProxy(&_PolyNFTLockProxy.TransactOpts, ethCCMProxyAddr)
}

// SetManagerProxy is a paid mutator transaction binding the contract method 0xaf9980f0.
//
// Solidity: function setManagerProxy(address ethCCMProxyAddr) returns()
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) SetManagerProxy(ethCCMProxyAddr common.Address) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.SetManagerProxy(&_PolyNFTLockProxy.TransactOpts, ethCCMProxyAddr)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PolyNFTLockProxy *PolyNFTLockProxySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.TransferOwnership(&_PolyNFTLockProxy.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.TransferOwnership(&_PolyNFTLockProxy.TransactOpts, newOwner)
}

// Unlock is a paid mutator transaction binding the contract method 0x06af4b9f.
//
// Solidity: function unlock(bytes argsBs, bytes fromContractAddr, uint64 fromChainId) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactor) Unlock(opts *bind.TransactOpts, argsBs []byte, fromContractAddr []byte, fromChainId uint64) (*types.Transaction, error) {
	return _PolyNFTLockProxy.contract.Transact(opts, "unlock", argsBs, fromContractAddr, fromChainId)
}

// Unlock is a paid mutator transaction binding the contract method 0x06af4b9f.
//
// Solidity: function unlock(bytes argsBs, bytes fromContractAddr, uint64 fromChainId) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxySession) Unlock(argsBs []byte, fromContractAddr []byte, fromChainId uint64) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.Unlock(&_PolyNFTLockProxy.TransactOpts, argsBs, fromContractAddr, fromChainId)
}

// Unlock is a paid mutator transaction binding the contract method 0x06af4b9f.
//
// Solidity: function unlock(bytes argsBs, bytes fromContractAddr, uint64 fromChainId) returns(bool)
func (_PolyNFTLockProxy *PolyNFTLockProxyTransactorSession) Unlock(argsBs []byte, fromContractAddr []byte, fromChainId uint64) (*types.Transaction, error) {
	return _PolyNFTLockProxy.Contract.Unlock(&_PolyNFTLockProxy.TransactOpts, argsBs, fromContractAddr, fromChainId)
}

// PolyNFTLockProxyBindAssetEventIterator is returned from FilterBindAssetEvent and is used to iterate over the raw logs and unpacked data for BindAssetEvent events raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyBindAssetEventIterator struct {
	Event *PolyNFTLockProxyBindAssetEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolyNFTLockProxyBindAssetEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolyNFTLockProxyBindAssetEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolyNFTLockProxyBindAssetEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolyNFTLockProxyBindAssetEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolyNFTLockProxyBindAssetEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolyNFTLockProxyBindAssetEvent represents a BindAssetEvent event raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyBindAssetEvent struct {
	FromAssetHash   common.Address
	ToChainId       uint64
	TargetProxyHash []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBindAssetEvent is a free log retrieval operation binding the contract event 0x661ffcb37a4682f1f64221cc81f683e2317505737d6425dd6799fcd39bc3753f.
//
// Solidity: event BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) FilterBindAssetEvent(opts *bind.FilterOpts) (*PolyNFTLockProxyBindAssetEventIterator, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.FilterLogs(opts, "BindAssetEvent")
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyBindAssetEventIterator{contract: _PolyNFTLockProxy.contract, event: "BindAssetEvent", logs: logs, sub: sub}, nil
}

// WatchBindAssetEvent is a free log subscription operation binding the contract event 0x661ffcb37a4682f1f64221cc81f683e2317505737d6425dd6799fcd39bc3753f.
//
// Solidity: event BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) WatchBindAssetEvent(opts *bind.WatchOpts, sink chan<- *PolyNFTLockProxyBindAssetEvent) (event.Subscription, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.WatchLogs(opts, "BindAssetEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolyNFTLockProxyBindAssetEvent)
				if err := _PolyNFTLockProxy.contract.UnpackLog(event, "BindAssetEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBindAssetEvent is a log parse operation binding the contract event 0x661ffcb37a4682f1f64221cc81f683e2317505737d6425dd6799fcd39bc3753f.
//
// Solidity: event BindAssetEvent(address fromAssetHash, uint64 toChainId, bytes targetProxyHash)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) ParseBindAssetEvent(log types.Log) (*PolyNFTLockProxyBindAssetEvent, error) {
	event := new(PolyNFTLockProxyBindAssetEvent)
	if err := _PolyNFTLockProxy.contract.UnpackLog(event, "BindAssetEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PolyNFTLockProxyBindProxyEventIterator is returned from FilterBindProxyEvent and is used to iterate over the raw logs and unpacked data for BindProxyEvent events raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyBindProxyEventIterator struct {
	Event *PolyNFTLockProxyBindProxyEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolyNFTLockProxyBindProxyEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolyNFTLockProxyBindProxyEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolyNFTLockProxyBindProxyEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolyNFTLockProxyBindProxyEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolyNFTLockProxyBindProxyEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolyNFTLockProxyBindProxyEvent represents a BindProxyEvent event raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyBindProxyEvent struct {
	ToChainId       uint64
	TargetProxyHash []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBindProxyEvent is a free log retrieval operation binding the contract event 0xdacd7d303272a3b58aec6620d6d1fb588f4996a5b46858ed437f1c34348f2d0f.
//
// Solidity: event BindProxyEvent(uint64 toChainId, bytes targetProxyHash)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) FilterBindProxyEvent(opts *bind.FilterOpts) (*PolyNFTLockProxyBindProxyEventIterator, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.FilterLogs(opts, "BindProxyEvent")
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyBindProxyEventIterator{contract: _PolyNFTLockProxy.contract, event: "BindProxyEvent", logs: logs, sub: sub}, nil
}

// WatchBindProxyEvent is a free log subscription operation binding the contract event 0xdacd7d303272a3b58aec6620d6d1fb588f4996a5b46858ed437f1c34348f2d0f.
//
// Solidity: event BindProxyEvent(uint64 toChainId, bytes targetProxyHash)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) WatchBindProxyEvent(opts *bind.WatchOpts, sink chan<- *PolyNFTLockProxyBindProxyEvent) (event.Subscription, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.WatchLogs(opts, "BindProxyEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolyNFTLockProxyBindProxyEvent)
				if err := _PolyNFTLockProxy.contract.UnpackLog(event, "BindProxyEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBindProxyEvent is a log parse operation binding the contract event 0xdacd7d303272a3b58aec6620d6d1fb588f4996a5b46858ed437f1c34348f2d0f.
//
// Solidity: event BindProxyEvent(uint64 toChainId, bytes targetProxyHash)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) ParseBindProxyEvent(log types.Log) (*PolyNFTLockProxyBindProxyEvent, error) {
	event := new(PolyNFTLockProxyBindProxyEvent)
	if err := _PolyNFTLockProxy.contract.UnpackLog(event, "BindProxyEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PolyNFTLockProxyLockEventIterator is returned from FilterLockEvent and is used to iterate over the raw logs and unpacked data for LockEvent events raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyLockEventIterator struct {
	Event *PolyNFTLockProxyLockEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolyNFTLockProxyLockEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolyNFTLockProxyLockEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolyNFTLockProxyLockEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolyNFTLockProxyLockEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolyNFTLockProxyLockEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolyNFTLockProxyLockEvent represents a LockEvent event raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyLockEvent struct {
	FromAssetHash common.Address
	FromAddress   common.Address
	ToAssetHash   []byte
	ToAddress     []byte
	ToChainId     uint64
	TokenId       *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterLockEvent is a free log retrieval operation binding the contract event 0x98081b3037dc78e7a7ffa56932222cfc7ea9325ad6a3e7b0b3b4e3e678d7fd13.
//
// Solidity: event LockEvent(address fromAssetHash, address fromAddress, bytes toAssetHash, bytes toAddress, uint64 toChainId, uint256 tokenId)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) FilterLockEvent(opts *bind.FilterOpts) (*PolyNFTLockProxyLockEventIterator, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.FilterLogs(opts, "LockEvent")
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyLockEventIterator{contract: _PolyNFTLockProxy.contract, event: "LockEvent", logs: logs, sub: sub}, nil
}

// WatchLockEvent is a free log subscription operation binding the contract event 0x98081b3037dc78e7a7ffa56932222cfc7ea9325ad6a3e7b0b3b4e3e678d7fd13.
//
// Solidity: event LockEvent(address fromAssetHash, address fromAddress, bytes toAssetHash, bytes toAddress, uint64 toChainId, uint256 tokenId)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) WatchLockEvent(opts *bind.WatchOpts, sink chan<- *PolyNFTLockProxyLockEvent) (event.Subscription, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.WatchLogs(opts, "LockEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolyNFTLockProxyLockEvent)
				if err := _PolyNFTLockProxy.contract.UnpackLog(event, "LockEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockEvent is a log parse operation binding the contract event 0x98081b3037dc78e7a7ffa56932222cfc7ea9325ad6a3e7b0b3b4e3e678d7fd13.
//
// Solidity: event LockEvent(address fromAssetHash, address fromAddress, bytes toAssetHash, bytes toAddress, uint64 toChainId, uint256 tokenId)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) ParseLockEvent(log types.Log) (*PolyNFTLockProxyLockEvent, error) {
	event := new(PolyNFTLockProxyLockEvent)
	if err := _PolyNFTLockProxy.contract.UnpackLog(event, "LockEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PolyNFTLockProxyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyOwnershipTransferredIterator struct {
	Event *PolyNFTLockProxyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolyNFTLockProxyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolyNFTLockProxyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolyNFTLockProxyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolyNFTLockProxyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolyNFTLockProxyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolyNFTLockProxyOwnershipTransferred represents a OwnershipTransferred event raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PolyNFTLockProxyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PolyNFTLockProxy.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyOwnershipTransferredIterator{contract: _PolyNFTLockProxy.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PolyNFTLockProxyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PolyNFTLockProxy.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolyNFTLockProxyOwnershipTransferred)
				if err := _PolyNFTLockProxy.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) ParseOwnershipTransferred(log types.Log) (*PolyNFTLockProxyOwnershipTransferred, error) {
	event := new(PolyNFTLockProxyOwnershipTransferred)
	if err := _PolyNFTLockProxy.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PolyNFTLockProxySetManagerProxyEventIterator is returned from FilterSetManagerProxyEvent and is used to iterate over the raw logs and unpacked data for SetManagerProxyEvent events raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxySetManagerProxyEventIterator struct {
	Event *PolyNFTLockProxySetManagerProxyEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolyNFTLockProxySetManagerProxyEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolyNFTLockProxySetManagerProxyEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolyNFTLockProxySetManagerProxyEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolyNFTLockProxySetManagerProxyEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolyNFTLockProxySetManagerProxyEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolyNFTLockProxySetManagerProxyEvent represents a SetManagerProxyEvent event raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxySetManagerProxyEvent struct {
	Manager common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetManagerProxyEvent is a free log retrieval operation binding the contract event 0x43b1a8ec337adb61e8311ed025d99c80db65c02fe5c5027c1b6a93b40970cec4.
//
// Solidity: event SetManagerProxyEvent(address manager)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) FilterSetManagerProxyEvent(opts *bind.FilterOpts) (*PolyNFTLockProxySetManagerProxyEventIterator, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.FilterLogs(opts, "SetManagerProxyEvent")
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxySetManagerProxyEventIterator{contract: _PolyNFTLockProxy.contract, event: "SetManagerProxyEvent", logs: logs, sub: sub}, nil
}

// WatchSetManagerProxyEvent is a free log subscription operation binding the contract event 0x43b1a8ec337adb61e8311ed025d99c80db65c02fe5c5027c1b6a93b40970cec4.
//
// Solidity: event SetManagerProxyEvent(address manager)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) WatchSetManagerProxyEvent(opts *bind.WatchOpts, sink chan<- *PolyNFTLockProxySetManagerProxyEvent) (event.Subscription, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.WatchLogs(opts, "SetManagerProxyEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolyNFTLockProxySetManagerProxyEvent)
				if err := _PolyNFTLockProxy.contract.UnpackLog(event, "SetManagerProxyEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetManagerProxyEvent is a log parse operation binding the contract event 0x43b1a8ec337adb61e8311ed025d99c80db65c02fe5c5027c1b6a93b40970cec4.
//
// Solidity: event SetManagerProxyEvent(address manager)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) ParseSetManagerProxyEvent(log types.Log) (*PolyNFTLockProxySetManagerProxyEvent, error) {
	event := new(PolyNFTLockProxySetManagerProxyEvent)
	if err := _PolyNFTLockProxy.contract.UnpackLog(event, "SetManagerProxyEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PolyNFTLockProxyUnlockEventIterator is returned from FilterUnlockEvent and is used to iterate over the raw logs and unpacked data for UnlockEvent events raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyUnlockEventIterator struct {
	Event *PolyNFTLockProxyUnlockEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolyNFTLockProxyUnlockEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolyNFTLockProxyUnlockEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolyNFTLockProxyUnlockEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolyNFTLockProxyUnlockEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolyNFTLockProxyUnlockEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolyNFTLockProxyUnlockEvent represents a UnlockEvent event raised by the PolyNFTLockProxy contract.
type PolyNFTLockProxyUnlockEvent struct {
	ToAssetHash common.Address
	ToAddress   common.Address
	TokenId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUnlockEvent is a free log retrieval operation binding the contract event 0xd90288730b87c2b8e0c45bd82260fd22478aba30ae1c4d578b8daba9261604df.
//
// Solidity: event UnlockEvent(address toAssetHash, address toAddress, uint256 tokenId)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) FilterUnlockEvent(opts *bind.FilterOpts) (*PolyNFTLockProxyUnlockEventIterator, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.FilterLogs(opts, "UnlockEvent")
	if err != nil {
		return nil, err
	}
	return &PolyNFTLockProxyUnlockEventIterator{contract: _PolyNFTLockProxy.contract, event: "UnlockEvent", logs: logs, sub: sub}, nil
}

// WatchUnlockEvent is a free log subscription operation binding the contract event 0xd90288730b87c2b8e0c45bd82260fd22478aba30ae1c4d578b8daba9261604df.
//
// Solidity: event UnlockEvent(address toAssetHash, address toAddress, uint256 tokenId)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) WatchUnlockEvent(opts *bind.WatchOpts, sink chan<- *PolyNFTLockProxyUnlockEvent) (event.Subscription, error) {

	logs, sub, err := _PolyNFTLockProxy.contract.WatchLogs(opts, "UnlockEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolyNFTLockProxyUnlockEvent)
				if err := _PolyNFTLockProxy.contract.UnpackLog(event, "UnlockEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockEvent is a log parse operation binding the contract event 0xd90288730b87c2b8e0c45bd82260fd22478aba30ae1c4d578b8daba9261604df.
//
// Solidity: event UnlockEvent(address toAssetHash, address toAddress, uint256 tokenId)
func (_PolyNFTLockProxy *PolyNFTLockProxyFilterer) ParseUnlockEvent(log types.Log) (*PolyNFTLockProxyUnlockEvent, error) {
	event := new(PolyNFTLockProxyUnlockEvent)
	if err := _PolyNFTLockProxy.contract.UnpackLog(event, "UnlockEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}
