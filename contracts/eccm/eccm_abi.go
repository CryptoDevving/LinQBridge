// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package eccm

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EthCrossChainManagerABI is the input ABI used to generate the binding from.
const EthCrossChainManagerABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eccd\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rawHeader\",\"type\":\"bytes\"}],\"name\":\"ChangeBookKeeperEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyOrAssetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toContract\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rawdata\",\"type\":\"bytes\"}],\"name\":\"CrossChainEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rawHeader\",\"type\":\"bytes\"}],\"name\":\"InitGenesisBlockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"fromChainID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toContract\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fromChainTxHash\",\"type\":\"bytes\"}],\"name\":\"VerifyHeaderAndExecuteTxEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EthCrossChainDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubKeyList\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sigList\",\"type\":\"bytes\"}],\"name\":\"changeBookKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"toContract\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"method\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"name\":\"crossChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubKeyList\",\"type\":\"bytes\"}],\"name\":\"initGenesisBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"txSig\",\"type\":\"bytes\"}],\"name\":\"verifySigAndExecuteTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// EthCrossChainManagerBin is the compiled bytecode used for deploying new contracts.
var EthCrossChainManagerBin = "0x608060405234801561001057600080fd5b5060405162004c9438038062004c948339818101604052604081101561003557600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050614bc980620000cb6000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062ba16941461006657806329dcf4ab146100b057806334a773eb146102b15780639a8a05921461041b578063b780d0271461044d578063bd5cf625146105b7575b600080fd5b61006e610706565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610297600480360360608110156100c657600080fd5b81019080803590602001906401000000008111156100e357600080fd5b8201836020820111156100f557600080fd5b8035906020019184600183028401116401000000008311171561011757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561017a57600080fd5b82018360208201111561018c57600080fd5b803590602001918460018302840111640100000000831117156101ae57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184600183028401116401000000008311171561024557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061072b565b604051808215151515815260200191505060405180910390f35b610401600480360360408110156102c757600080fd5b81019080803590602001906401000000008111156102e457600080fd5b8201836020820111156102f657600080fd5b8035906020019184600183028401116401000000008311171561031857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561037b57600080fd5b82018360208201111561038d57600080fd5b803590602001918460018302840111640100000000831117156103af57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610e67565b604051808215151515815260200191505060405180910390f35b6104236113e1565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b61059d6004803603604081101561046357600080fd5b810190808035906020019064010000000081111561048057600080fd5b82018360208201111561049257600080fd5b803590602001918460018302840111640100000000831117156104b457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561051757600080fd5b82018360208201111561052957600080fd5b8035906020019184600183028401116401000000008311171561054b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506113fb565b604051808215151515815260200191505060405180910390f35b6106ec600480360360808110156105cd57600080fd5b81019080803567ffffffffffffffff169060200190929190803590602001906401000000008111156105fe57600080fd5b82018360208201111561061057600080fd5b8035906020019184600183028401116401000000008311171561063257600080fd5b90919293919293908035906020019064010000000081111561065357600080fd5b82018360208201111561066557600080fd5b8035906020019184600183028401116401000000008311171561068757600080fd5b9091929391929390803590602001906401000000008111156106a857600080fd5b8201836020820111156106ba57600080fd5b803590602001918460018302840111640100000000831117156106dc57600080fd5b90919293919293905050506119d9565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610735614708565b61073e856121fd565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16635ac407906040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ae57600080fd5b505afa1580156107c2573d6000803e3d6000fd5b505050506040513d60208110156107d857600080fd5b810190808051906020019092919050505063ffffffff1690508067ffffffffffffffff16836060015163ffffffff161161085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001806148bc603e913960400191505060405180910390fd5b600060601b6bffffffffffffffffffffffff19168361014001516bffffffffffffffffffffffff191614156108dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061480e6025913960400191505060405180910390fd5b6060610a268373ffffffffffffffffffffffffffffffffffffffff166369d480746040518163ffffffff1660e01b815260040160006040518083038186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561096657600080fd5b810190808051604051939291908464010000000082111561098657600080fd5b8382019150602082018581111561099c57600080fd5b82518660018202830111640100000000821117156109b957600080fd5b8083526020830192505050908051906020019080838360005b838110156109ed5780820151818401526020810190506109d2565b50505050905090810190601f168015610a1a5780820380516001836020036101000a031916815260200191505b50604052505050612388565b9050600081519050610a4989888460036001860381610a4157fe5b048503612476565b610abb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f566572696679207369676e6174757265206661696c656421000000000000000081525060200191505060405180910390fd5b60006060610ac88a6126c7565b91509150816bffffffffffffffffffffffff19168761014001516bffffffffffffffffffffffff191614610b64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e657874426f6f6b65727320696c6c6567616c0000000000000000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff16638a8bd17f88606001516040518263ffffffff1660e01b8152600401808263ffffffff1663ffffffff168152602001915050602060405180830381600087803b158015610bc757600080fd5b505af1158015610bdb573d6000803e3d6000fd5b505050506040513d6020811015610bf157600080fd5b8101908080519060200190929190505050610c57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180614988602d913960400191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166341973cd9610c7c836127f7565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ccb578082015181840152602081019050610cb0565b50505050905090810190601f168015610cf85780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610d1757600080fd5b505af1158015610d2b573d6000803e3d6000fd5b505050506040513d6020811015610d4157600080fd5b8101908080519060200190929190505050610da7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b815260200180614925603b913960400191505060405180910390fd5b7fe60d33488cba3977bf65766cd2f8ac9617f64bf3b3198aff6240ce5c7d43b69087606001518c604051808363ffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e1a578082015181840152602081019050610dff565b50505050905090810190601f168015610e475780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160019750505050505050509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166369d480746040518163ffffffff1660e01b815260040160006040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610f1457600080fd5b8101908080516040519392919084640100000000821115610f3457600080fd5b83820191506020820185811115610f4a57600080fd5b8251866001820283011164010000000082111715610f6757600080fd5b8083526020830192505050908051906020019080838360005b83811015610f9b578082015181840152602081019050610f80565b50505050905090810190601f168015610fc85780820380516001836020036101000a031916815260200191505b506040525050505114611026576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180614a356038913960400191505060405180910390fd5b61102e614708565b611037856121fd565b905060006060611046866126c7565b91509150816bffffffffffffffffffffffff19168361014001516bffffffffffffffffffffffff1916146110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e657874426f6f6b65727320696c6c6567616c0000000000000000000000000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16638a8bd17f84606001516040518263ffffffff1660e01b8152600401808263ffffffff1663ffffffff168152602001915050602060405180830381600087803b15801561114557600080fd5b505af1158015611159573d6000803e3d6000fd5b505050506040513d602081101561116f57600080fd5b81019080805190602001909291905050506111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001806148566043913960600191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166341973cd96111fa836127f7565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561124957808201518184015260208101905061122e565b50505050905090810190601f1680156112765780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b505050506040513d60208110156112bf57600080fd5b8101908080519060200190929190505050611325576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526043815260200180614a6d6043913960600191505060405180910390fd5b7ff01968fc3a2655cf1b5144cb32de6dc898f91b9239c103744e8457152ab2fbde836060015188604051808363ffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561139857808201518184015260208101905061137d565b50505050905090810190601f1680156113c55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1600194505050505092915050565b600060149054906101000a900467ffffffffffffffff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050606061156b8273ffffffffffffffffffffffffffffffffffffffff166369d480746040518163ffffffff1660e01b815260040160006040518083038186803b15801561146d57600080fd5b505afa158015611481573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156114ab57600080fd5b81019080805160405193929190846401000000008211156114cb57600080fd5b838201915060208201858111156114e157600080fd5b82518660018202830111640100000000821117156114fe57600080fd5b8083526020830192505050908051906020019080838360005b83811015611532578082015181840152602081019050611517565b50505050905090810190601f16801561155f5780820380516001836020036101000a031916815260200191505b50604052505050612388565b905060008151905061158e8686846003600186038161158657fe5b048503612476565b611600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f566572696679207369676e6174757265206661696c656421000000000000000081525060200191505060405180910390fd5b6116086147a3565b61161187612915565b90508373ffffffffffffffffffffffffffffffffffffffff16630586763c826020015183600001516040518363ffffffff1660e01b8152600401808367ffffffffffffffff1667ffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561168857600080fd5b505afa15801561169c573d6000803e3d6000fd5b505050506040513d60208110156116b257600080fd5b810190808051906020019092919050505015611719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614ad26022913960400191505060405180910390fd5b600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16816060015167ffffffffffffffff161461179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614b24602a913960400191505060405180910390fd5b60006117ae82608001516129ec565b90506118088160405160200180807f756e6c6f636b000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040528460a0015185604001518660200151612a54565b61187a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f457865637574652043726f7373436861696e205478206661696c65642100000081525060200191505060405180910390fd5b7fa48858b0baa1c3ab9de18e2fb399ae238d6987a1dc01df4821a556600871b5b982602001518360800151846000015160405160200180828152602001915050604051602081830303815290604052604051808467ffffffffffffffff1667ffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561192757808201518184015260208101905061190c565b50505050905090810190601f1680156119545780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561198d578082015181840152602081019050611972565b50505050905090810190601f1680156119ba5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a160019550505050505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ff3d24a16040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4857600080fd5b505afa158015611a5c573d6000803e3d6000fd5b505050506040513d6020811015611a7257600080fd5b810190808051906020019092919050505090506060611a9082612efe565b90506060611a9d82612fb1565b611c0360023085604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b60208310611b0f5780518252602082019150602081019050602083039250611aec565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310611b775780518252602082019150602081019050602083039250611b54565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611bb9573d6000803e3d6000fd5b5050506040513d6020811015611bce57600080fd5b810190808051906020019092919050505060405160200180828152602001915050604051602081830303815290604052612fb1565b611c14611c0f33613087565b612fb1565b611c1d8f6130a7565b611c6a8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612fb1565b611cb78e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612fb1565b611d048d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612fb1565b6040516020018088805190602001908083835b60208310611d3a5780518252602082019150602081019050602083039250611d17565b6001836020036101000a03801982511681845116808217855250505050505090500187805190602001908083835b60208310611d8b5780518252602082019150602081019050602083039250611d68565b6001836020036101000a03801982511681845116808217855250505050505090500186805190602001908083835b60208310611ddc5780518252602082019150602081019050602083039250611db9565b6001836020036101000a03801982511681845116808217855250505050505090500185805190602001908083835b60208310611e2d5780518252602082019150602081019050602083039250611e0a565b6001836020036101000a03801982511681845116808217855250505050505090500184805190602001908083835b60208310611e7e5780518252602082019150602081019050602083039250611e5b565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310611ecf5780518252602082019150602081019050602083039250611eac565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611f205780518252602082019150602081019050602083039250611efd565b6001836020036101000a03801982511681845116808217855250505050505090500197505050505050505060405160208183030381529060405290508373ffffffffffffffffffffffffffffffffffffffff16634c3ccf6482805190602001206040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050506040513d6020811015611fe057600080fd5b8101908080519060200190929190505050612046576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180614af46030913960400191505060405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff167f6ad3bf15c1988bc04bc153490cab16db8efb9a3990215bf1c64ea6e28be8848383338f8f8f8760405180806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff168152602001806020018060200184810384528a818151815260200191508051906020019080838360005b838110156121185780820151818401526020810190506120fd565b50505050905090810190601f1680156121455780820380516001836020036101000a031916815260200191505b508481038352878782818152602001925080828437600081840152601f19601f820116905080830192505050848103825285818151815260200191508051906020019080838360005b838110156121a957808201518184015260208101905061218e565b50505050905090810190601f1680156121d65780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a26001945050505050979650505050505050565b612205614708565b61220d614708565b600080905061221c84826130ef565b836000018193508263ffffffff1663ffffffff16815250505061223f84826131b7565b836020018193508267ffffffffffffffff1667ffffffffffffffff16815250505061226a848261327f565b8360a001819350828152505050612281848261327f565b8360c001819350828152505050612298848261327f565b8360e0018193508281525050506122af848261327f565b83610100018193508281525050506122c784826130ef565b836040018193508263ffffffff1663ffffffff1681525050506122ea84826130ef565b836060018193508263ffffffff1663ffffffff16815250505061230d84826131b7565b836080018193508267ffffffffffffffff1667ffffffffffffffff1681525050506123388482613326565b819150836101200181935082905250506123528482613426565b8361014001819350826bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681525050508192505050919050565b60606000809050600061239b84836131b7565b809350819250505060608167ffffffffffffffff166040519080825280602002602001820160405280156123de5781602001602082028038833980820191505090505b509050606060008090505b8367ffffffffffffffff16811015612469576124058786613326565b8096508193505050612416826129ec565b83828151811061242257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506123e9565b5081945050505050919050565b600080612482866134b0565b90506000604186518161249157fe5b0490506060816040519080825280602002602001820160405280156124c55781602001602082028038833980820191505090505b509050600080600080600090505b858110156126ab576124f26124ed8c604184026020613612565b61369e565b935061250e6125098c602060418502016020613612565b61369e565b9250601b8b604060418402018151811061252457fe5b602001015160f81c60f81b60f81c0191506001600288604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061258c5780518252602082019150602081019050602083039250612569565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156125ce573d6000803e3d6000fd5b5050506040513d60208110156125e357600080fd5b810190808051906020019092919050505083868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561264e573d6000803e3d6000fd5b5050506020604051035185828151811061266457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506124d3565b506126b789858a613723565b9650505050505050949350505050565b60006060600060438451816126d857fe5b061461274c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5f7075624b65794c697374206c656e67746820696c6c6567616c21000000000081525060200191505060405180910390fd5b6000604384518161275957fe5b04905060018110156127d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f746f6f2073686f7274205f7075624b65794c697374210000000000000000000081525060200191505060405180910390fd5b6127ed81600360018403816127e457fe5b04830386613803565b9250925050915091565b6060600082519050606061280a826130a7565b905060008090505b8281101561290a578161283f61283a87848151811061282d57fe5b6020026020010151613087565b612fb1565b6040516020018083805190602001908083835b602083106128755780518252602082019150602081019050602083039250612852565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106128c657805182526020820191506020810190506020830392506128a3565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291508080600101915050612812565b508092505050919050565b61291d6147a3565b6129256147a3565b6000809050612934848261327f565b8360000181935082815250505061294b84826131b7565b836020018193508267ffffffffffffffff1667ffffffffffffffff1681525050506129768482613326565b81915083604001819350829052505061298f84826131b7565b836060018193508267ffffffffffffffff1667ffffffffffffffff1681525050506129ba8482613326565b8191508360800181935082905250506129d38482613326565b8191508360a00181935082905250508192505050919050565b60006014825114612a48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806148336023913960400191505060405180910390fd5b60148201519050919050565b6000612a5f86613bc5565b612ab4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806149606028913960400191505060405180910390fd5b606060008773ffffffffffffffffffffffffffffffffffffffff16876040516020018082805190602001908083835b60208310612b065780518252602082019150602081019050602083039250612ae3565b6001836020036101000a038019825116818451168082178552505050505050905001807f2862797465732c62797465732c75696e74363429000000000000000000000000815250601401915050604051602081830303815290604052805190602001208787876040516020018080602001806020018467ffffffffffffffff1667ffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b83811015612bcd578082015181840152602081019050612bb2565b50505050905090810190601f168015612bfa5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015612c33578082015181840152602081019050612c18565b50505050905090810190601f168015612c605780820380516001836020036101000a031916815260200191505b509550505050505060405160208183030381529060405260405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083835b60208310612cf15780518252602082019150602081019050602083039250612cce565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310612d595780518252602082019150602081019050602083039250612d36565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612dbb576040519150601f19603f3d011682016040523d82523d6000602084013e612dc0565b606091505b5080935081925050506001151581151514612e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806148fa602b913960400191505060405180910390fd5b600082511415612e81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806149b56027913960400191505060405180910390fd5b6000612e8e83601f613c10565b5090506001151581151514612eee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001806149dc6037913960400191505060405180910390fd5b6001935050505095945050505050565b60607f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612f96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f56616c75652065786365656473207468652072616e676500000000000000000081525060200191505060405180910390fd5b60405190506020815281602082015260408101604052919050565b6060600082519050612fc281613d97565b836040516020018083805190602001908083835b60208310612ff95780518252602082019150602081019050602083039250612fd6565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061304a5780518252602082019150602081019050602083039250613027565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b60606040519050601481528160601b602082015260408101604052919050565b606080604051905060088082526000601f5b828210156130dc5785811a826020860101536001820191506001810390506130b9565b5050602882016040525080915050919050565b6000808351600484011115801561310857506004830183105b61315d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614b4e6022913960400191505060405180910390fd5b600060405160046000600182038760208a0101515b838310156131925780821a83860153600183019250600182039150613172565b5050508082016040528060200382035192505050806004850192509250509250929050565b600080835160088401111580156131d057506008830183105b613225576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614ab06022913960400191505060405180910390fd5b600060405160086000600182038760208a0101515b8383101561325a5780821a8386015360018301925060018203915061323a565b5050508082016040528060200382035192505050806008850192509250509250929050565b6000808351602084011115801561329857506020830183105b61330a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e657874486173682c206f66667365742065786365656473206d6178696d756d81525060200191505060405180910390fd5b6000602084018501519050806020850192509250509250929050565b60606000806133358585614070565b8095508192505050845181850111158015613351575080840184105b6133a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180614b706024913960400191505060405180910390fd5b60608115600081146133c357604051915060208201604052613414565b6040519150601f8316801560200281840101848101888315602002848c0101015b8183101561340157805183526020830192506020810190506133e4565b50858552601f19601f8301166040525050505b50808286019350935050509250929050565b6000808351601484011115801561343f57506014830183105b613494576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806148996023913960400191505060405180910390fd5b6000602084018501519050806014850192509250509250929050565b6000600280836040518082805190602001908083835b602083106134e957805182526020820191506020810190506020830392506134c6565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa15801561352b573d6000803e3d6000fd5b5050506040513d602081101561354057600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106135a35780518252602082019150602081019050602083039250613580565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156135e5573d6000803e3d6000fd5b5050506040513d60208110156135fa57600080fd5b81019080805190602001909291905050509050919050565b60608183018451101561362457600080fd5b606082156000811461364157604051915060208201604052613692565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561367f5780518352602083019250602081019050613662565b50868552601f19601f8301166040525050505b50809150509392505050565b60006020825114613717576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6279746573206c656e677468206973206e6f742033322e00000000000000000081525060200191505060405180910390fd5b60208201519050919050565b6000806000905060008090505b84518110156137f45760008090505b86518110156137e65786818151811061375457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686838151811061377e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156137d95782806001019350508681815181106137b657fe5b60200260200101600073ffffffffffffffffffffffffffffffffffffffff168152505b808060010191505061373f565b508080600101915050613730565b50828110159150509392505050565b6000606080613811866143a1565b90506060866040519080825280602002602001820160405280156138445781602001602082028038833980820191505090505b5090506000606060008090505b898110156139a75761386888604383026043613612565b91508461387c613877846143e9565b612fb1565b6040516020018083805190602001908083835b602083106138b2578051825260208201915060208101905060208303925061388f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061390357805182526020820191506020810190506020830392506138e0565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405294506139478260036040613612565b8051906020012092508260001c84828151811061396057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050613851565b50836139b2896143a1565b6040516020018083805190602001908083835b602083106139e857805182526020820191506020810190506020830392506139c5565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310613a395780518252602082019150602081019050602083039250613a16565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529350600060036002866040518082805190602001908083835b60208310613aaa5780518252602082019150602081019050602083039250613a87565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015613aec573d6000803e3d6000fd5b5050506040513d6020811015613b0157600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310613b645780518252602082019150602081019050602083039250613b41565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015613ba6573d6000803e3d6000fd5b5050506040515160601b90508084965096505050505050935093915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b8214158015613c075750808214155b92505050919050565b60008083516001840111158015613c2957506001830183105b613c9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4f66667365742065786365656473206c696d697400000000000000000000000081525060200191505060405180910390fd5b60008360208601015190506000600160f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415613cdf5760019050613d85565b600060f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415613d165760009050613d84565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e657874426f6f6c2076616c7565206572726f7200000000000000000000000081525060200191505060405180910390fd5b5b80600186019350935050509250929050565b606060fd8267ffffffffffffffff161015613dbc57613db582614535565b905061406b565b61ffff8267ffffffffffffffff1611613ea857613ddc60fd60f81b61455a565b613de5836143a1565b6040516020018083805190602001908083835b60208310613e1b5780518252602082019150602081019050602083039250613df8565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310613e6c5780518252602082019150602081019050602083039250613e49565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905061406b565b63ffffffff8267ffffffffffffffff1611613f9657613eca60fe60f81b61455a565b613ed38361456f565b6040516020018083805190602001908083835b60208310613f095780518252602082019150602081019050602083039250613ee6565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310613f5a5780518252602082019150602081019050602083039250613f37565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905061406b565b613fa360ff60f81b61455a565b613fac836130a7565b6040516020018083805190602001908083835b60208310613fe25780518252602082019150602081019050602083039250613fbf565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106140335780518252602082019150602081019050602083039250614010565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290505b919050565b600080600061407f85856145b7565b8095508192505050600060fd60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415614162576140c1868661465e565b8161ffff169150809650819250505060fd81101580156140e3575061ffff8111155b614155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4e65787455696e7431362c2076616c7565206f7574736964652072616e67650081525060200191505060405180910390fd5b808593509350505061439a565b60fe60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561423f5761419a86866130ef565b8163ffffffff169150809650819250505061ffff811180156141c0575063ffffffff8111155b614232576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e65787456617255696e742c2076616c7565206f7574736964652072616e676581525060200191505060405180910390fd5b808593509350505061439a565b60ff60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156143125761427786866131b7565b8167ffffffffffffffff169150809650819250505063ffffffff8111614305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e65787456617255696e742c2076616c7565206f7574736964652072616e676581525060200191505060405180910390fd5b808593509350505061439a565b8160f81c60ff16905060fd8110614391576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e65787456617255696e742c2076616c7565206f7574736964652072616e676581525060200191505060405180910390fd5b80859350935050505b9250929050565b606080604051905060028082526000601f5b828210156143d65785811a826020860101536001820191506001810390506143b3565b5050602282016040525080915050919050565b6060604382511015614463576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6b6579206c656e67676820697320746f6f2073686f727400000000000000000081525060200191505060405180910390fd5b6144708260006023613612565b9050600060028360428151811061448357fe5b602001015160f81c60f81b60f81c60ff168161449b57fe5b0660ff1614156144eb57600260f81b816002815181106144b757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061452d565b600360f81b816002815181106144fd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b809050919050565b6060806040519050600181528260f81b60208201526021810160405280915050919050565b60606145688260f81c614535565b9050919050565b606080604051905060048082526000601f5b828210156145a45785811a82602086010153600182019150600181039050614581565b5050602482016040525080915050919050565b600080835160018401111580156145d057506001830183105b614642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e657874427974652c204f66667365742065786365656473206d6178696d756d81525060200191505060405180910390fd5b6000836020860101519050806001850192509250509250929050565b6000808351600284011115801561467757506002830183105b6146cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614a136022913960400191505060405180910390fd5b6000604051846020870101518060011a82538060001a600183015360028201604052601e82035192505050806002850192509250509250929050565b604051806101600160405280600063ffffffff168152602001600067ffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600067ffffffffffffffff168152602001600080191681526020016000801916815260200160008019168152602001600080191681526020016060815260200160006bffffffffffffffffffffffff191681525090565b60405180610140016040528060008019168152602001600067ffffffffffffffff16815260200160608152602001600067ffffffffffffffff168152602001606081526020016060815260200160608152602001606081526020016000815260200160608152509056fe546865206e657874426f6f6b4b6565706572206f662068656164657220697320656d7074796279746573206c656e67746820646f6573206e6f74206d6174636820616464726573735361766520506f6c7920636861696e2063757272656e742065706f63682073746172742068656967687420746f204461746120636f6e7472616374206661696c6564214e657874427974657332302c206f66667365742065786365656473206d6178696d756d54686520686569676874206f6620686561646572206973206c6f776572207468616e2063757272656e742065706f6368207374617274206865696768742145746843726f7373436861696e2063616c6c20627573696e65737320636f6e7472616374206661696c65645361766520506f6c7920636861696e20626f6f6b206b65657065727320627974657320746f204461746120636f6e7472616374206661696c6564215468652070617373656420696e2061646472657373206973206e6f74206120636f6e74726163742153617665204d43204c617465737448656967687420746f204461746120636f6e7472616374206661696c6564214e6f2072657475726e2076616c75652066726f6d20627573696e65737320636f6e74726163742145746843726f7373436861696e2063616c6c20627573696e65737320636f6e74726163742072657475726e206973206e6f7420747275654e65787455696e7431362c206f66667365742065786365656473206d6178696d756d45746843726f7373436861696e4461746120636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a6564215361766520506f6c7920636861696e2063757272656e742065706f636820626f6f6b206b65657065727320746f204461746120636f6e7472616374206661696c6564214e65787455696e7436342c206f66667365742065786365656473206d6178696d756d746865207472616e73616374696f6e20686173206265656e20657865637574656421536176652065746854784861736820627920696e64657820746f204461746120636f6e7472616374206661696c65642154686973205478206973206e6f742061696d696e6720617420457468657265756d206e6574776f726b214e65787455696e7433322c206f66667365742065786365656473206d6178696d756d4e65787456617242797465732c206f66667365742065786365656473206d6178696d756da2646970667358221220b8247d4838d737cf57b9aa4b490cad46c72caa04ec4144c7097eecf3cc606eeb64736f6c63430006020033"

// DeployEthCrossChainManager deploys a new Ethereum contract, binding an instance of EthCrossChainManager to it.
func DeployEthCrossChainManager(auth *bind.TransactOpts, backend bind.ContractBackend, _eccd common.Address, _chainId uint64) (common.Address, *types.Transaction, *EthCrossChainManager, error) {
	parsed, err := abi.JSON(strings.NewReader(EthCrossChainManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EthCrossChainManagerBin), backend, _eccd, _chainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthCrossChainManager{EthCrossChainManagerCaller: EthCrossChainManagerCaller{contract: contract}, EthCrossChainManagerTransactor: EthCrossChainManagerTransactor{contract: contract}, EthCrossChainManagerFilterer: EthCrossChainManagerFilterer{contract: contract}}, nil
}

// EthCrossChainManager is an auto generated Go binding around an Ethereum contract.
type EthCrossChainManager struct {
	EthCrossChainManagerCaller     // Read-only binding to the contract
	EthCrossChainManagerTransactor // Write-only binding to the contract
	EthCrossChainManagerFilterer   // Log filterer for contract events
}

// EthCrossChainManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthCrossChainManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthCrossChainManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthCrossChainManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthCrossChainManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthCrossChainManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthCrossChainManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthCrossChainManagerSession struct {
	Contract     *EthCrossChainManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// EthCrossChainManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthCrossChainManagerCallerSession struct {
	Contract *EthCrossChainManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// EthCrossChainManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthCrossChainManagerTransactorSession struct {
	Contract     *EthCrossChainManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// EthCrossChainManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthCrossChainManagerRaw struct {
	Contract *EthCrossChainManager // Generic contract binding to access the raw methods on
}

// EthCrossChainManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthCrossChainManagerCallerRaw struct {
	Contract *EthCrossChainManagerCaller // Generic read-only contract binding to access the raw methods on
}

// EthCrossChainManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthCrossChainManagerTransactorRaw struct {
	Contract *EthCrossChainManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthCrossChainManager creates a new instance of EthCrossChainManager, bound to a specific deployed contract.
func NewEthCrossChainManager(address common.Address, backend bind.ContractBackend) (*EthCrossChainManager, error) {
	contract, err := bindEthCrossChainManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManager{EthCrossChainManagerCaller: EthCrossChainManagerCaller{contract: contract}, EthCrossChainManagerTransactor: EthCrossChainManagerTransactor{contract: contract}, EthCrossChainManagerFilterer: EthCrossChainManagerFilterer{contract: contract}}, nil
}

// NewEthCrossChainManagerCaller creates a new read-only instance of EthCrossChainManager, bound to a specific deployed contract.
func NewEthCrossChainManagerCaller(address common.Address, caller bind.ContractCaller) (*EthCrossChainManagerCaller, error) {
	contract, err := bindEthCrossChainManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerCaller{contract: contract}, nil
}

// NewEthCrossChainManagerTransactor creates a new write-only instance of EthCrossChainManager, bound to a specific deployed contract.
func NewEthCrossChainManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*EthCrossChainManagerTransactor, error) {
	contract, err := bindEthCrossChainManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerTransactor{contract: contract}, nil
}

// NewEthCrossChainManagerFilterer creates a new log filterer instance of EthCrossChainManager, bound to a specific deployed contract.
func NewEthCrossChainManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*EthCrossChainManagerFilterer, error) {
	contract, err := bindEthCrossChainManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerFilterer{contract: contract}, nil
}

// bindEthCrossChainManager binds a generic wrapper to an already deployed contract.
func bindEthCrossChainManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthCrossChainManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthCrossChainManager *EthCrossChainManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthCrossChainManager.Contract.EthCrossChainManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthCrossChainManager *EthCrossChainManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.EthCrossChainManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthCrossChainManager *EthCrossChainManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.EthCrossChainManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthCrossChainManager *EthCrossChainManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthCrossChainManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthCrossChainManager *EthCrossChainManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthCrossChainManager *EthCrossChainManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.contract.Transact(opts, method, params...)
}

// EthCrossChainDataAddress is a free data retrieval call binding the contract method 0x00ba1694.
//
// Solidity: function EthCrossChainDataAddress() view returns(address)
func (_EthCrossChainManager *EthCrossChainManagerCaller) EthCrossChainDataAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthCrossChainManager.contract.Call(opts, &out, "EthCrossChainDataAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EthCrossChainDataAddress is a free data retrieval call binding the contract method 0x00ba1694.
//
// Solidity: function EthCrossChainDataAddress() view returns(address)
func (_EthCrossChainManager *EthCrossChainManagerSession) EthCrossChainDataAddress() (common.Address, error) {
	return _EthCrossChainManager.Contract.EthCrossChainDataAddress(&_EthCrossChainManager.CallOpts)
}

// EthCrossChainDataAddress is a free data retrieval call binding the contract method 0x00ba1694.
//
// Solidity: function EthCrossChainDataAddress() view returns(address)
func (_EthCrossChainManager *EthCrossChainManagerCallerSession) EthCrossChainDataAddress() (common.Address, error) {
	return _EthCrossChainManager.Contract.EthCrossChainDataAddress(&_EthCrossChainManager.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint64)
func (_EthCrossChainManager *EthCrossChainManagerCaller) ChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _EthCrossChainManager.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint64)
func (_EthCrossChainManager *EthCrossChainManagerSession) ChainId() (uint64, error) {
	return _EthCrossChainManager.Contract.ChainId(&_EthCrossChainManager.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint64)
func (_EthCrossChainManager *EthCrossChainManagerCallerSession) ChainId() (uint64, error) {
	return _EthCrossChainManager.Contract.ChainId(&_EthCrossChainManager.CallOpts)
}

// ChangeBookKeeper is a paid mutator transaction binding the contract method 0x29dcf4ab.
//
// Solidity: function changeBookKeeper(bytes rawHeader, bytes pubKeyList, bytes sigList) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactor) ChangeBookKeeper(opts *bind.TransactOpts, rawHeader []byte, pubKeyList []byte, sigList []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.contract.Transact(opts, "changeBookKeeper", rawHeader, pubKeyList, sigList)
}

// ChangeBookKeeper is a paid mutator transaction binding the contract method 0x29dcf4ab.
//
// Solidity: function changeBookKeeper(bytes rawHeader, bytes pubKeyList, bytes sigList) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerSession) ChangeBookKeeper(rawHeader []byte, pubKeyList []byte, sigList []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.ChangeBookKeeper(&_EthCrossChainManager.TransactOpts, rawHeader, pubKeyList, sigList)
}

// ChangeBookKeeper is a paid mutator transaction binding the contract method 0x29dcf4ab.
//
// Solidity: function changeBookKeeper(bytes rawHeader, bytes pubKeyList, bytes sigList) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactorSession) ChangeBookKeeper(rawHeader []byte, pubKeyList []byte, sigList []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.ChangeBookKeeper(&_EthCrossChainManager.TransactOpts, rawHeader, pubKeyList, sigList)
}

// CrossChain is a paid mutator transaction binding the contract method 0xbd5cf625.
//
// Solidity: function crossChain(uint64 toChainId, bytes toContract, bytes method, bytes txData) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactor) CrossChain(opts *bind.TransactOpts, toChainId uint64, toContract []byte, method []byte, txData []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.contract.Transact(opts, "crossChain", toChainId, toContract, method, txData)
}

// CrossChain is a paid mutator transaction binding the contract method 0xbd5cf625.
//
// Solidity: function crossChain(uint64 toChainId, bytes toContract, bytes method, bytes txData) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerSession) CrossChain(toChainId uint64, toContract []byte, method []byte, txData []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.CrossChain(&_EthCrossChainManager.TransactOpts, toChainId, toContract, method, txData)
}

// CrossChain is a paid mutator transaction binding the contract method 0xbd5cf625.
//
// Solidity: function crossChain(uint64 toChainId, bytes toContract, bytes method, bytes txData) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactorSession) CrossChain(toChainId uint64, toContract []byte, method []byte, txData []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.CrossChain(&_EthCrossChainManager.TransactOpts, toChainId, toContract, method, txData)
}

// InitGenesisBlock is a paid mutator transaction binding the contract method 0x34a773eb.
//
// Solidity: function initGenesisBlock(bytes rawHeader, bytes pubKeyList) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactor) InitGenesisBlock(opts *bind.TransactOpts, rawHeader []byte, pubKeyList []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.contract.Transact(opts, "initGenesisBlock", rawHeader, pubKeyList)
}

// InitGenesisBlock is a paid mutator transaction binding the contract method 0x34a773eb.
//
// Solidity: function initGenesisBlock(bytes rawHeader, bytes pubKeyList) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerSession) InitGenesisBlock(rawHeader []byte, pubKeyList []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.InitGenesisBlock(&_EthCrossChainManager.TransactOpts, rawHeader, pubKeyList)
}

// InitGenesisBlock is a paid mutator transaction binding the contract method 0x34a773eb.
//
// Solidity: function initGenesisBlock(bytes rawHeader, bytes pubKeyList) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactorSession) InitGenesisBlock(rawHeader []byte, pubKeyList []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.InitGenesisBlock(&_EthCrossChainManager.TransactOpts, rawHeader, pubKeyList)
}

// VerifySigAndExecuteTx is a paid mutator transaction binding the contract method 0xb780d027.
//
// Solidity: function verifySigAndExecuteTx(bytes txBytes, bytes txSig) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactor) VerifySigAndExecuteTx(opts *bind.TransactOpts, txBytes []byte, txSig []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.contract.Transact(opts, "verifySigAndExecuteTx", txBytes, txSig)
}

// VerifySigAndExecuteTx is a paid mutator transaction binding the contract method 0xb780d027.
//
// Solidity: function verifySigAndExecuteTx(bytes txBytes, bytes txSig) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerSession) VerifySigAndExecuteTx(txBytes []byte, txSig []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.VerifySigAndExecuteTx(&_EthCrossChainManager.TransactOpts, txBytes, txSig)
}

// VerifySigAndExecuteTx is a paid mutator transaction binding the contract method 0xb780d027.
//
// Solidity: function verifySigAndExecuteTx(bytes txBytes, bytes txSig) returns(bool)
func (_EthCrossChainManager *EthCrossChainManagerTransactorSession) VerifySigAndExecuteTx(txBytes []byte, txSig []byte) (*types.Transaction, error) {
	return _EthCrossChainManager.Contract.VerifySigAndExecuteTx(&_EthCrossChainManager.TransactOpts, txBytes, txSig)
}

// EthCrossChainManagerChangeBookKeeperEventIterator is returned from FilterChangeBookKeeperEvent and is used to iterate over the raw logs and unpacked data for ChangeBookKeeperEvent events raised by the EthCrossChainManager contract.
type EthCrossChainManagerChangeBookKeeperEventIterator struct {
	Event *EthCrossChainManagerChangeBookKeeperEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthCrossChainManagerChangeBookKeeperEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthCrossChainManagerChangeBookKeeperEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthCrossChainManagerChangeBookKeeperEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthCrossChainManagerChangeBookKeeperEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthCrossChainManagerChangeBookKeeperEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthCrossChainManagerChangeBookKeeperEvent represents a ChangeBookKeeperEvent event raised by the EthCrossChainManager contract.
type EthCrossChainManagerChangeBookKeeperEvent struct {
	Height    *big.Int
	RawHeader []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChangeBookKeeperEvent is a free log retrieval operation binding the contract event 0xe60d33488cba3977bf65766cd2f8ac9617f64bf3b3198aff6240ce5c7d43b690.
//
// Solidity: event ChangeBookKeeperEvent(uint256 height, bytes rawHeader)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) FilterChangeBookKeeperEvent(opts *bind.FilterOpts) (*EthCrossChainManagerChangeBookKeeperEventIterator, error) {

	logs, sub, err := _EthCrossChainManager.contract.FilterLogs(opts, "ChangeBookKeeperEvent")
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerChangeBookKeeperEventIterator{contract: _EthCrossChainManager.contract, event: "ChangeBookKeeperEvent", logs: logs, sub: sub}, nil
}

// WatchChangeBookKeeperEvent is a free log subscription operation binding the contract event 0xe60d33488cba3977bf65766cd2f8ac9617f64bf3b3198aff6240ce5c7d43b690.
//
// Solidity: event ChangeBookKeeperEvent(uint256 height, bytes rawHeader)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) WatchChangeBookKeeperEvent(opts *bind.WatchOpts, sink chan<- *EthCrossChainManagerChangeBookKeeperEvent) (event.Subscription, error) {

	logs, sub, err := _EthCrossChainManager.contract.WatchLogs(opts, "ChangeBookKeeperEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthCrossChainManagerChangeBookKeeperEvent)
				if err := _EthCrossChainManager.contract.UnpackLog(event, "ChangeBookKeeperEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeBookKeeperEvent is a log parse operation binding the contract event 0xe60d33488cba3977bf65766cd2f8ac9617f64bf3b3198aff6240ce5c7d43b690.
//
// Solidity: event ChangeBookKeeperEvent(uint256 height, bytes rawHeader)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) ParseChangeBookKeeperEvent(log types.Log) (*EthCrossChainManagerChangeBookKeeperEvent, error) {
	event := new(EthCrossChainManagerChangeBookKeeperEvent)
	if err := _EthCrossChainManager.contract.UnpackLog(event, "ChangeBookKeeperEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EthCrossChainManagerCrossChainEventIterator is returned from FilterCrossChainEvent and is used to iterate over the raw logs and unpacked data for CrossChainEvent events raised by the EthCrossChainManager contract.
type EthCrossChainManagerCrossChainEventIterator struct {
	Event *EthCrossChainManagerCrossChainEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthCrossChainManagerCrossChainEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthCrossChainManagerCrossChainEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthCrossChainManagerCrossChainEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthCrossChainManagerCrossChainEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthCrossChainManagerCrossChainEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthCrossChainManagerCrossChainEvent represents a CrossChainEvent event raised by the EthCrossChainManager contract.
type EthCrossChainManagerCrossChainEvent struct {
	Sender               common.Address
	TxId                 []byte
	ProxyOrAssetContract common.Address
	ToChainId            uint64
	ToContract           []byte
	Rawdata              []byte
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCrossChainEvent is a free log retrieval operation binding the contract event 0x6ad3bf15c1988bc04bc153490cab16db8efb9a3990215bf1c64ea6e28be88483.
//
// Solidity: event CrossChainEvent(address indexed sender, bytes txId, address proxyOrAssetContract, uint64 toChainId, bytes toContract, bytes rawdata)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) FilterCrossChainEvent(opts *bind.FilterOpts, sender []common.Address) (*EthCrossChainManagerCrossChainEventIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EthCrossChainManager.contract.FilterLogs(opts, "CrossChainEvent", senderRule)
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerCrossChainEventIterator{contract: _EthCrossChainManager.contract, event: "CrossChainEvent", logs: logs, sub: sub}, nil
}

// WatchCrossChainEvent is a free log subscription operation binding the contract event 0x6ad3bf15c1988bc04bc153490cab16db8efb9a3990215bf1c64ea6e28be88483.
//
// Solidity: event CrossChainEvent(address indexed sender, bytes txId, address proxyOrAssetContract, uint64 toChainId, bytes toContract, bytes rawdata)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) WatchCrossChainEvent(opts *bind.WatchOpts, sink chan<- *EthCrossChainManagerCrossChainEvent, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EthCrossChainManager.contract.WatchLogs(opts, "CrossChainEvent", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthCrossChainManagerCrossChainEvent)
				if err := _EthCrossChainManager.contract.UnpackLog(event, "CrossChainEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCrossChainEvent is a log parse operation binding the contract event 0x6ad3bf15c1988bc04bc153490cab16db8efb9a3990215bf1c64ea6e28be88483.
//
// Solidity: event CrossChainEvent(address indexed sender, bytes txId, address proxyOrAssetContract, uint64 toChainId, bytes toContract, bytes rawdata)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) ParseCrossChainEvent(log types.Log) (*EthCrossChainManagerCrossChainEvent, error) {
	event := new(EthCrossChainManagerCrossChainEvent)
	if err := _EthCrossChainManager.contract.UnpackLog(event, "CrossChainEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EthCrossChainManagerInitGenesisBlockEventIterator is returned from FilterInitGenesisBlockEvent and is used to iterate over the raw logs and unpacked data for InitGenesisBlockEvent events raised by the EthCrossChainManager contract.
type EthCrossChainManagerInitGenesisBlockEventIterator struct {
	Event *EthCrossChainManagerInitGenesisBlockEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthCrossChainManagerInitGenesisBlockEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthCrossChainManagerInitGenesisBlockEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthCrossChainManagerInitGenesisBlockEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthCrossChainManagerInitGenesisBlockEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthCrossChainManagerInitGenesisBlockEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthCrossChainManagerInitGenesisBlockEvent represents a InitGenesisBlockEvent event raised by the EthCrossChainManager contract.
type EthCrossChainManagerInitGenesisBlockEvent struct {
	Height    *big.Int
	RawHeader []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInitGenesisBlockEvent is a free log retrieval operation binding the contract event 0xf01968fc3a2655cf1b5144cb32de6dc898f91b9239c103744e8457152ab2fbde.
//
// Solidity: event InitGenesisBlockEvent(uint256 height, bytes rawHeader)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) FilterInitGenesisBlockEvent(opts *bind.FilterOpts) (*EthCrossChainManagerInitGenesisBlockEventIterator, error) {

	logs, sub, err := _EthCrossChainManager.contract.FilterLogs(opts, "InitGenesisBlockEvent")
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerInitGenesisBlockEventIterator{contract: _EthCrossChainManager.contract, event: "InitGenesisBlockEvent", logs: logs, sub: sub}, nil
}

// WatchInitGenesisBlockEvent is a free log subscription operation binding the contract event 0xf01968fc3a2655cf1b5144cb32de6dc898f91b9239c103744e8457152ab2fbde.
//
// Solidity: event InitGenesisBlockEvent(uint256 height, bytes rawHeader)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) WatchInitGenesisBlockEvent(opts *bind.WatchOpts, sink chan<- *EthCrossChainManagerInitGenesisBlockEvent) (event.Subscription, error) {

	logs, sub, err := _EthCrossChainManager.contract.WatchLogs(opts, "InitGenesisBlockEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthCrossChainManagerInitGenesisBlockEvent)
				if err := _EthCrossChainManager.contract.UnpackLog(event, "InitGenesisBlockEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitGenesisBlockEvent is a log parse operation binding the contract event 0xf01968fc3a2655cf1b5144cb32de6dc898f91b9239c103744e8457152ab2fbde.
//
// Solidity: event InitGenesisBlockEvent(uint256 height, bytes rawHeader)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) ParseInitGenesisBlockEvent(log types.Log) (*EthCrossChainManagerInitGenesisBlockEvent, error) {
	event := new(EthCrossChainManagerInitGenesisBlockEvent)
	if err := _EthCrossChainManager.contract.UnpackLog(event, "InitGenesisBlockEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator is returned from FilterVerifyHeaderAndExecuteTxEvent and is used to iterate over the raw logs and unpacked data for VerifyHeaderAndExecuteTxEvent events raised by the EthCrossChainManager contract.
type EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator struct {
	Event *EthCrossChainManagerVerifyHeaderAndExecuteTxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthCrossChainManagerVerifyHeaderAndExecuteTxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthCrossChainManagerVerifyHeaderAndExecuteTxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthCrossChainManagerVerifyHeaderAndExecuteTxEvent represents a VerifyHeaderAndExecuteTxEvent event raised by the EthCrossChainManager contract.
type EthCrossChainManagerVerifyHeaderAndExecuteTxEvent struct {
	FromChainID     uint64
	ToContract      []byte
	FromChainTxHash []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVerifyHeaderAndExecuteTxEvent is a free log retrieval operation binding the contract event 0xa48858b0baa1c3ab9de18e2fb399ae238d6987a1dc01df4821a556600871b5b9.
//
// Solidity: event VerifyHeaderAndExecuteTxEvent(uint64 fromChainID, bytes toContract, bytes fromChainTxHash)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) FilterVerifyHeaderAndExecuteTxEvent(opts *bind.FilterOpts) (*EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator, error) {

	logs, sub, err := _EthCrossChainManager.contract.FilterLogs(opts, "VerifyHeaderAndExecuteTxEvent")
	if err != nil {
		return nil, err
	}
	return &EthCrossChainManagerVerifyHeaderAndExecuteTxEventIterator{contract: _EthCrossChainManager.contract, event: "VerifyHeaderAndExecuteTxEvent", logs: logs, sub: sub}, nil
}

// WatchVerifyHeaderAndExecuteTxEvent is a free log subscription operation binding the contract event 0xa48858b0baa1c3ab9de18e2fb399ae238d6987a1dc01df4821a556600871b5b9.
//
// Solidity: event VerifyHeaderAndExecuteTxEvent(uint64 fromChainID, bytes toContract, bytes fromChainTxHash)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) WatchVerifyHeaderAndExecuteTxEvent(opts *bind.WatchOpts, sink chan<- *EthCrossChainManagerVerifyHeaderAndExecuteTxEvent) (event.Subscription, error) {

	logs, sub, err := _EthCrossChainManager.contract.WatchLogs(opts, "VerifyHeaderAndExecuteTxEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthCrossChainManagerVerifyHeaderAndExecuteTxEvent)
				if err := _EthCrossChainManager.contract.UnpackLog(event, "VerifyHeaderAndExecuteTxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyHeaderAndExecuteTxEvent is a log parse operation binding the contract event 0xa48858b0baa1c3ab9de18e2fb399ae238d6987a1dc01df4821a556600871b5b9.
//
// Solidity: event VerifyHeaderAndExecuteTxEvent(uint64 fromChainID, bytes toContract, bytes fromChainTxHash)
func (_EthCrossChainManager *EthCrossChainManagerFilterer) ParseVerifyHeaderAndExecuteTxEvent(log types.Log) (*EthCrossChainManagerVerifyHeaderAndExecuteTxEvent, error) {
	event := new(EthCrossChainManagerVerifyHeaderAndExecuteTxEvent)
	if err := _EthCrossChainManager.contract.UnpackLog(event, "VerifyHeaderAndExecuteTxEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}
